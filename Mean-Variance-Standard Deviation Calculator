import numpy as np

def calculate(numbers):
    """
    Convert a list of 9 numbers into a 3x3 numpy array and calculate statistics.
    
    Parameters:
        numbers (list): A list containing exactly nine numbers.
        
    Returns:
        dict: A dictionary containing mean, variance, standard deviation, 
              max, min, and sum for columns, rows, and the entire array.
              
    Raises:
        ValueError: If the input list does not contain exactly nine numbers.
    """
    if len(numbers) != 9:
        raise ValueError("List must contain nine numbers.")
    
    # Convert to 3x3 numpy array
    arr = np.array(numbers).reshape(3, 3)
    
    # Calculate statistics for columns, rows, and entire array
    mean_cols = np.mean(arr, axis=0).tolist()
    mean_rows = np.mean(arr, axis=1).tolist()
    mean_overall = np.mean(arr).tolist()
    
    var_cols = np.var(arr, axis=0).tolist()
    var_rows = np.var(arr, axis=1).tolist()
    var_overall = np.var(arr).tolist()
    
    std_cols = np.std(arr, axis=0).tolist()
    std_rows = np.std(arr, axis=1).tolist()
    std_overall = np.std(arr).tolist()
    
    max_cols = np.max(arr, axis=0).tolist()
    max_rows = np.max(arr, axis=1).tolist()
    max_overall = np.max(arr).tolist()
    
    min_cols = np.min(arr, axis=0).tolist()
    min_rows = np.min(arr, axis=1).tolist()
    min_overall = np.min(arr).tolist()
    
    sum_cols = np.sum(arr, axis=0).tolist()
    sum_rows = np.sum(arr, axis=1).tolist()
    sum_overall = np.sum(arr).tolist()
    
    # Return dictionary with required format
    return {
        'mean': [mean_cols, mean_rows, mean_overall],
        'variance': [var_cols, var_rows, var_overall],
        'standard deviation': [std_cols, std_rows, std_overall],
        'max': [max_cols, max_rows, max_overall],
        'min': [min_cols, min_rows, min_overall],
        'sum': [sum_cols, sum_rows, sum_overall]
    }

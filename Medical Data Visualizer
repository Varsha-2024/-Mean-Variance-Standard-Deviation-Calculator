import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

def draw_cat_plot_and_heat_map():
    # Load the CSV into a Pandas DataFrame
    df = pd.read_csv('medical_examination.csv')
    
    # Add an 'overweight' column to the DataFrame. Mark as 1 if BMI > 25, else 0.
    df['overweight'] = (df['weight'] / ((df['height'] / 100) ** 2) > 25).astype(int)
    
    # Normalize the 'cholesterol' and 'gluc' columns
    df['cholesterol'] = (df['cholesterol'] > 1).astype(int)
    df['gluc'] = (df['gluc'] > 1).astype(int)
    
    # Create a categorical plot (catplot)
    # Melt the DataFrame to long format
    df_cat = pd.melt(df, 
                     id_vars=['cardio'], 
                     value_vars=['cholesterol', 'gluc', 'smoke', 'alco', 'active', 'overweight'])
    
    # Group and reformat the data to split it by 'cardio'
    df_cat = df_cat.groupby(['cardio', 'variable', 'value']).size().reset_index(name='total')
    
    # Draw the catplot
    fig = sns.catplot(data=df_cat, x='variable', y='total', hue='value', col='cardio', kind='bar')
    catplot_figure = fig.fig
    
    # Save the catplot
    catplot_figure.savefig('catplot.png')
    
    # Clean the data for heatmap
    # Remove outliers for height, weight, and ap_hi/ap_lo based on percentiles
    df_heat = df[
        (df['ap_lo'] <= df['ap_hi']) &
        (df['height'] >= df['height'].quantile(0.025)) &
        (df['height'] <= df['height'].quantile(0.975)) &
        (df['weight'] >= df['weight'].quantile(0.025)) &
        (df['weight'] <= df['weight'].quantile(0.975))
    ]
    
    # Calculate the correlation matrix
    corr = df_heat.corr()
    
    # Generate a mask for the upper triangle
    mask = np.triu(np.ones_like(corr, dtype=bool))
    
    # Set up the matplotlib figure
    fig, ax = plt.subplots(figsize=(12, 10))
    
    # Draw the heatmap
    heatmap_figure = sns.heatmap(corr, mask=mask, annot=True, fmt='.1f', center=0, 
                                 square=True, linewidths=0.5, cbar_kws={"shrink": 0.5})
    heatmap_figure = heatmap_figure.get_figure()
    
    # Save the heatmap
    heatmap_figure.savefig('heatmap.png')
    
    # Return the figure objects
    return catplot_figure, heatmap_figure
